@using Microsoft.AspNetCore.Http
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Microsoft.AspNetCore.Authentication;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using Newtonsoft.Json
@using PTV.Application.Web


@model UiAppSettings

@{
    ViewData["Title"] = "Home Page";
}

@section scripts {

    <script>
    @*
        don't use @Model.something_here to render values for javascript because it will HTML encode the values
        thats why @Html.Raw(...) is used so that the original string is printed as it was
    *@
    function getAccessToken() {
             return '@Html.Raw(Model.AccessToken)';
    }

@*    function getUserFirstNameSurname() {*@
@*        return '@Html.Raw(Model.UserInfo.Name)';*@
@*    }*@
@**@
@*    function getUserRole() {*@
@*        return '@Html.Raw(Model.UserInfo.Role)';*@
@*    }*@

    const g_userInfo = @Html.Raw(JsonConvert.SerializeObject(Model.UserInfo));

    function getApiUrl() {
            return '@Html.Raw(Model.CustomApiUrl)';
    }

    function getEnvironmentType() {
        return '@Html.Raw(Model.EnvironmentType)';
    }

    function getStsUrl() {
        return '@Html.Raw(Model.StsUrl)';
    }

    function getAppVersion() {
        return '@Model.VersionPrefix@Model.Version';
    }

</script>

    <environment names="Development">

    @if (Model.IsWebpackDisabled)
    {
        <script>
            const isDevelopment = false;
        </script>
        <script src="~/js/bundle/bundle.min.js"></script>
    }
    else
    {
        <script>
            const isDevelopment = true;
        </script>
    }
</environment>
    <environment names="Staging,Production">
        <script>
            const isDevelopment = false;
        </script>
        <script src="~/js/bundle/bundle.min.js?v=@ViewData["VersionPrefix"]@ViewData["Version"]"></script>
    </environment>

}

<div id="page-wrapper">
</div>


